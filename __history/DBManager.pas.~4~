unit DBManager;

interface
uses SysUtils, System.Classes;
procedure WriteBookToFile(BookName: string; BookLang: string; BookPubDate: string);
procedure WriteAuthToFile(AuthId: integer; AuthSurname: string; AuthCountry: string);
procedure WriteAuthBookToFile(AuthId: integer; BookName: string);

implementation

uses AuthBooksTable, AuthorsTable, BooksTable, LPmain;

const BooksPath = 'books.txt';
const AuthPath = 'auth.txt';
const AuthBooksPath = 'authbooks.txt';


procedure WriteBookToFile(BookName: string; BookLang: string; BookPubDate: string);
var
  MyFile: TextFile;
  StreamWriter: TStreamWriter;
begin
   AssignFile(MyFile, BooksPath);
   StreamWriter := TStreamWriter.Create(BooksPath, False, TEncoding.UTF8);
   if not FileExists(BooksPath) then Rewrite(MyFile);
   Append(MyFile);
   StreamWriter.Write(BookName + ';' + BookLang + ';' + BookPubDate);
   CloseFile(MyFile);
end;

procedure WriteAuthToFile(AuthId: integer; AuthSurname: string; AuthCountry: string);
var
  MyFile: TextFile;
  StreamWriter: TStreamWriter;
begin
   AssignFile(MyFile, AuthPath);
   StreamWriter := TStreamWriter.Create(AuthPath, False, TEncoding.UTF8);
   if not FileExists(AuthPath) then Rewrite(MyFile);
   Append(MyFile);
   StreamWriter.Write(IntToStr(AuthId) + ';' + AuthSurname + ';' + AuthCountry);
   CloseFile(MyFile);
end;

procedure WriteAuthBookToFile(AuthId: integer; BookName: string);
var
  MyFile: TextFile;
  StreamWriter: TStreamWriter;
begin
   AssignFile(MyFile, AuthBooksPath);
   StreamWriter := TStreamWriter.Create(AuthBooksPath, False, TEncoding.UTF8);
   if not FileExists(AuthBooksPath) then Rewrite(MyFile);
   Append(MyFile);
   StreamWriter.Write(IntToStr(AuthId) + ';' + BookName + ';');
   CloseFile(MyFile);
end;


end.